import re
import glob
import os
import json

class SQLIScanner:

    UNSAFE_SQL_FUNCTIONS = ["execute", "$wpdb->query", "$wpdb->get_results", "$this->db", "esc_sql", "eval", "exec"]
    SAFE_SQL_FUNCTIONS = ["prepare", "prepareStatement", "$wpdb->prepare"]
    USER_INPUTS = ["$_GET", "$_POST", "$_REQUEST", "$_SERVER", "$_COOKIE", "$_SESSION", "$_GLOBALS", "$sql", "$query", "$user_input", "$input"]
    
    SQL_PATTERN = re.compile(
        r"(SELECT|INSERT|UPDATE|DELETE|REPLACE|ALTER|DROP|CREATE|FROM|INTO|TABLE|DATABASE).*?['\"]?\$[_A-Za-z0-9]+['\"]?",
        re.IGNORECASE
    )
    
    CONCATENATION_PATTERN = re.compile(r"(\$[_A-Za-z0-9]+\s*\.\s*['\"].*['\"]?)")
    
    DANGEROUS_KEYWORDS = re.compile(
        r"(UNION.*SELECT|INFORMATION_SCHEMA|LOAD_FILE|OUTFILE|DUMPFILE|EXEC|EXECUTE|SLEEP\s*\(|BENCHMARK\s*\(|XP_CMD|CAST\s*\(|CONCAT\s*\(|OR\s+1=1|AND\s+1=1)",
        re.IGNORECASE
    )
    
    def __init__(self, php_code):
        self.php_code = php_code.split("\n")
        self.multi_line_sql = ""
        self.multi_line_start = None
    
    def analyze(self):
        vulnerabilities = []
        
        for line_no, line in enumerate(self.php_code, start=1):
            stripped_line = line.strip()
            
            # 주석인 부분은 제외
            if stripped_line.startswith("//") or stripped_line.startswith("#") or stripped_line.startswith("/*") or stripped_line.startswith("*"):
                continue
            
            # 다중 라인 SQL 문 결합
            if self.multi_line_start:
                self.multi_line_sql += " " + stripped_line
                if stripped_line.endswith(";"):
                    vulnerabilities.extend(self.check_vulnerability(self.multi_line_sql, self.multi_line_start))
                    self.multi_line_sql = ""
                    self.multi_line_start = None
                continue
            
            # 안전한 SQL 실행 구문은 제외
            if any(func in stripped_line for func in self.SAFE_SQL_FUNCTIONS):
                continue
            
            # 위험한 SQL 함수 포함 여부 확인
            if any(func in stripped_line for func in self.UNSAFE_SQL_FUNCTIONS):
                vulnerabilities.extend(self.check_vulnerability(stripped_line, line_no))
                
                # SQL 구문이 여러 줄에 걸쳐 있을 경우 처리
                if not stripped_line.endswith(";"):
                    self.multi_line_sql = stripped_line
                    self.multi_line_start = line_no
        
        return vulnerabilities
    
    def check_vulnerability(self, line, line_no):
        vulnerabilities = []
        
        # 사용자 입력이 직접 포함된 경우만 감지
        if any(user_input in line for user_input in self.USER_INPUTS):
            if self.CONCATENATION_PATTERN.search(line) or self.SQL_PATTERN.search(line):
                vulnerabilities.append((line_no, line, "사용자 입력이 포함된 SQL 실행 감지"))
            
            # 추가적으로 SQL Injection 공격 기법 포함 여부 탐지
            if self.DANGEROUS_KEYWORDS.search(line):
                vulnerabilities.append((line_no, line, "SQL 인젝션 공격 기법 포함 가능성"))
        
        return vulnerabilities
    
    def analyze_file(self, file_path):
        print(f"검사 중인 파일: {file_path}")
        with open(file_path, 'r', encoding='utf-8') as file:
            php_code = file.read()
        self.__init__(php_code)
        return [(file_path, *vuln) for vuln in self.analyze()]

    def analyze_directory(self, directory_path):
        vulnerabilities = []
        php_files = glob.glob(os.path.join(directory_path, '**/*.php'), recursive=True)
        for php_file in php_files:
            vulnerabilities.extend(self.analyze_file(php_file))
        return vulnerabilities

# plugins 디렉터리 내 모든 플러그인 폴더 탐색
plugins_dir = "plugins"
result_dir = "result"
os.makedirs(result_dir, exist_ok=True)  # result 디렉터리 생성

scanner = SQLIScanner("")
plugin_folders = [os.path.join(plugins_dir, d) for d in os.listdir(plugins_dir) if os.path.isdir(os.path.join(plugins_dir, d))]

for plugin_folder in plugin_folders:
    plugin_name = os.path.basename(plugin_folder)  # 플러그인 폴더명 추출
    vulnerabilities = scanner.analyze_directory(plugin_folder)

    # 플러그인별 결과 저장 디렉터리 생성
    plugin_result_dir = os.path.join(result_dir, plugin_name)
    os.makedirs(plugin_result_dir, exist_ok=True)

    # JSON 파일로 결과 저장
    result_file = os.path.join(plugin_result_dir, "sqli_results.json")
    with open(result_file, "w", encoding="utf-8") as f:
        json.dump(vulnerabilities, f, ensure_ascii=False, indent=4)

    if vulnerabilities:
        print(f"[+] {plugin_name}에서 취약점 발견! 결과 저장: {result_file}")
    else:
        print(f"[-] {plugin_name}에서 취약점이 발견되지 않음.")
