import os, glob, re
import json

class POI:
    def __init__(self, target_dir, result_dir):
        self.target_dir = target_dir
        self.result_dir = result_dir
        os.makedirs(self.result_dir, exist_ok=True)

    def read_php_file(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            print(f"파일을 읽는 중 오류 발생: {file_path}, 오류: {e}")
            return None

    def detect_php_object_injection(self, php_code):
        """PHP Object Injection 탐지 및 매칭된 패턴, 줄 번호 반환"""
        patterns = [
            r'class\s+\w+\s*{[^}]*?(?:unserialize|maybe_unserialize|serialize|is_serialized)\s*\(.*?\)[^}]*}',
            r'\b(?:unserialize|maybe_unserialize|serialize|is_serialized)\s*\('
        ]

        for pattern in patterns:
            matches = list(re.finditer(pattern, php_code, re.DOTALL))
            if matches:
                line_numbers = []
                for match in matches:
                    start_pos = match.start()
                    line_num = php_code[:start_pos].count('\n') + 1
                    line_numbers.append(line_num)
                return True, pattern, line_numbers

        return False, None, []

    def save_results(self, results, filename):
        result_path = os.path.join(self.result_dir, filename)
        with open(result_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=4, ensure_ascii=False)
        print(f"결과 저장 완료: {result_path}")

    def save_files(self):
        results = []
        php_files = glob.glob(os.path.join(self.target_dir, '**/*.php'), recursive=True)

        for php_file in php_files:
            php_code = self.read_php_file(php_file)
            if php_code:
                is_vuln, matched_pattern, line_numbers = self.detect_php_object_injection(php_code)
                if is_vuln:
                    results.append({
                        "file": php_file,
                        "vulnerability": "PHP Object Injection",
                        "matched_pattern": matched_pattern,
                        "line_numbers": line_numbers
                    })

        self.save_results(results, "php_object_injection_results.json")

    def run_php_scan(self):
        print(f"[*] PHP Object Injection 탐지 시작: {self.target_dir}")
        self.save_files()
        print("[+] 탐지 완료.")
