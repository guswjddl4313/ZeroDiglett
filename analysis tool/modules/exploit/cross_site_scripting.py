import os
import re
import json

# TO DO
# echo + sanitize_ 쓰는 경우 > 필터링이 없는지
# echo + esc_ 쓰는 경우 > 조건에 맞게 사용됐는지

class XSS:
    def __init__(self, target_dir, result_dir):
        self.target_dir = target_dir
        self.result_dir = result_dir
        self.sanitize_methods = [
            "sanitize_text_field", "sanitize_email", "sanitize_file_name", "sanitize_html_class", 
            "sanitize_key", "sanitize_meta", "sanitize_mime_type", "sanitize_option", "sanitize_sql_orderby", 
            "sanitize_term", "sanitize_term_field", "sanitize_title", "sanitize_title_for_query", 
            "sanitize_title_with_dashes", "sanitize_user"
        ]
        self.escape_methods = {
            "html": "esc_html",
            "attr": "esc_attr",
            "url": "esc_url",
            "js": "esc_js",
            "textarea": "esc_textarea",
            "xml": "esc_xml",
            "json": "wp_json_encode",
            "kses": ["wp_kses", "wp_kses_post"]
        }
        
        # 결과 저장 디렉터리 생성
        os.makedirs(self.result_dir, exist_ok=True)

    # PHP 코드에서 echo와 sanitize_ or esc_ 메서드가 함께 사용된 라인을 찾는 함수
    def check_php_security(self, file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            code_lines = f.readlines()

        echo_sanitize_lines = []
        echo_escape_lines = []

        for i, line in enumerate(code_lines):
            if "echo" in line:
                if any(method in line for method in self.sanitize_methods):  
                    echo_sanitize_lines.append({
                        "file": file_path,
                        "line": i + 1,
                        "code": line.strip()
                    })

                for tag, methods in self.escape_methods.items():
                    if isinstance(methods, list):
                        escape_check = any(method in line for method in methods)
                    else:
                        escape_check = methods in line

                    if escape_check:
                        echo_escape_lines.append({
                            "file": file_path,
                            "line": i + 1,
                            "context": tag,
                            "code": line.strip()
                        })

        return echo_sanitize_lines, echo_escape_lines

    # 지정된 폴더 내 모든 PHP 파일 검사
    def scan_php_directory(self):
        sanitize_results = []
        escape_results = []

        for root, _, files in os.walk(self.target_dir):
            for file in files:
                if file.endswith(".php"):
                    file_path = os.path.join(root, file)
                    sanitize_lines, escape_lines = self.check_php_security(file_path)
                    sanitize_results.extend(sanitize_lines)
                    escape_results.extend(escape_lines)

        return sanitize_results, escape_results

    # 결과 저장 및 출력
    def save_results(self, results, filename):
        output_file = os.path.join(self.result_dir, filename)
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=4)
        print(f"🔍 검사 완료! 결과가 {output_file} 파일에 저장되었습니다.")

    # 실행 함수
    def run_scan(self):
        print(f"[*] {self.target_dir} 디렉터리에서 XSS 검사 실행...")
        sanitize_results, escape_results = self.scan_php_directory()

        if sanitize_results:
            print("⚠️ [주의] echo와 sanitize_ 메서드가 함께 사용된 코드:")
            for line_info in sanitize_results:
                print(f"📌 [취약 가능성 있음] {line_info['file']} (라인 {line_info['line']}):")
                print(f"   코드: {line_info['code']}\n")
            self.save_results(sanitize_results, "echo_sanitize_lines.json")
        else:
            print("✅ echo와 sanitize_ 메서드가 함께 쓰인 코드가 발견되지 않았습니다.")

        if escape_results:
            print("⚠️ [확인 필요] echo와 esc_ 메서드가 사용된 코드:")
            for line_info in escape_results:
                print(f"📌 [컨텍스트: {line_info['context']}] {line_info['file']} (라인 {line_info['line']}):")
                print(f"   코드: {line_info['code']}\n")
            self.save_results(escape_results, "echo_escape_lines.json")
        else:
            print("✅ echo와 esc_ 메서드가 함께 쓰인 코드가 발견되지 않았습니다.")
