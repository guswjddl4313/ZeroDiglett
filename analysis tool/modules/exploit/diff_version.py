import os
import chardet
import shutil
import re

# import personal files
# from php_vuln_logic.maybe_function import check_maybe_function

def check_about_serialize_function(php_content):
    if php_content and "maybe_serialize" in php_content and "maybe_unserialize" in php_content and "unserialize" in php_content and "serialize" in php_content and "is_serialized" in php_content:
        return True
    

def detect_encoding(file_path, sample_size=1024):
    """파일의 인코딩을 감지하여 반환"""
    with open(file_path, "rb") as f:
        raw_data = f.read(sample_size)
    return chardet.detect(raw_data)["encoding"] or "utf-8"

def read_php_file(file_path):
    """PHP 파일을 안전하게 읽어오는 함수"""
    try:
        encoding = detect_encoding(file_path)
        with open(file_path, "r", encoding=encoding, errors="replace") as f:
            return f.read()
    except FileNotFoundError:
        print(f"파일을 찾을 수 없습니다: {file_path}")
    except PermissionError:
        print(f"파일 접근 권한이 없습니다: {file_path}")
    except Exception as e:
        print(f"파일을 읽는 중 오류 발생: {e}")
    return None

def detect_php_object_injection(php_code):
    """PHP Object Injection 탐지"""
    patterns = [
        r'class\s+\w+\s*{[^}]*?(?:unserialize|maybe_unserialize|serialize|is_serialized)\s*\(.*?\)[^}]*}',
    ]
    
    for pattern in patterns:
        if re.search(pattern, php_code, re.DOTALL):
            return True
    return False

def read_php_files_from_plugins_directory(plugins_directory_path, destination_directory):
    """플러그인 디렉토리의 바로 하위 디렉토리에서 모든 PHP 파일을 찾아 읽어오기"""
    if not os.path.isdir(plugins_directory_path):
        print(f"지정한 경로가 디렉토리가 아닙니다: {plugins_directory_path}")
        return
    
    if not os.path.exists(destination_directory):
        os.makedirs(destination_directory)
    
    for plugin_name in os.listdir(plugins_directory_path):
        plugin_path = os.path.join(plugins_directory_path, plugin_name)
        
        if not os.path.isdir(plugin_path):
            continue  # 플러그인 디렉토리의 하위 폴더만 대상
        
        plugin_destination_directory = os.path.join(destination_directory, plugin_name)
        if not os.path.exists(plugin_destination_directory):
            os.makedirs(plugin_destination_directory)
        
        for root, _, files in os.walk(plugin_path):
            php_files = [f for f in files if f.endswith(".php")]
            
            if not php_files:
                continue
            
            for php_file in php_files:
                file_path = os.path.join(root, php_file)
                php_content = read_php_file(file_path)
                
                if php_content:
                    if check_about_serialize_function(php_content) or detect_php_object_injection(php_content):
                        print(f"파일 복사: {plugin_destination_directory}")
                        shutil.copy(file_path, plugin_destination_directory)
                        

plugins_directory_path = "plugins/"
destination_directory = "vulnerable_poi_plugins/"
read_php_files_from_plugins_directory(plugins_directory_path, destination_directory)
